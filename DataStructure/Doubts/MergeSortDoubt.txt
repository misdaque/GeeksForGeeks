/*
    Why the time complexities in these two piece of code are different
*/


class Solution
{

// Merges two subarrays of arr[].
    // First subarray is arr[l..m]
    // Second subarray is arr[m+1..r]
    void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];

        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];


        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarry array
        int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    //method for dividing the array into halves
    public void mergeSort(int arr[], int l, int r)
    {

        if (l < r)
        {
            int m = (l+r)/2;
            mergeSort(arr, l, m);
            mergeSort(arr , m+1, r);
            merge(arr, l, m, r);
        }
    }
}


/************************************************************************
************************************************************************
*************************************************************************
**************************************************************************/

class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
         // Your code here

         int i = l;
         int j = m + 1;
         int k = l;

         int[] newArr = new int[r + 1];

         while(i <= m && j <= r){
             if(arr[i] < arr[j])
                newArr[k++] = arr[i++];
            else
                newArr[k++] = arr[j++];
         }

        while(i <= m)
            newArr[k++] = arr[i++];

        while(j <= r)
            newArr[k++] = arr[j++];

        for(i = l ; i <= r ; i++)
            arr[i] = newArr[i];
    }
    void mergeSort(int arr[], int l, int r)
    {
        //code here

        if(l < r){
            int mid = (l + r) / 2;

            mergeSort(arr, l , mid);
            mergeSort(arr, mid + 1 , r);
            merge(arr, l, mid , r);
        }
    }
}
